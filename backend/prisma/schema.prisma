// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  name        String?
  email       String    @unique
  password    String    
  accessToken String?  
  profilePic  String?

  blogs       Blog[]
  claps       Clap[]
  comments    Comment[]
  likes       Like[]
  favoriates  Favoriate[]
  customList  CustomList[]

  createdAt   DateTime  @default(now()) 
  updatedAt   DateTime  @default(now())   @updatedAt      
}

model Blog{
  id                String      @id   @default(uuid())
  title             String
  content           String
  picture           String?
  published         Boolean?    @default(false)
  author            User        @relation(fields: [authorId], references: [id])
  authorId          String
  claps             Clap[]
  comments          Comment[]
  likes             Like[]
  favoriates        Favoriate[]
  customListBlogs   CustomListBlogs[]


  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())  @updatedAt
}

model Clap{
  id        String        @id @default(uuid())
  userId    String        
  user      User          @relation(fields:[userId] , references: [id])
  blogId    String
  blog      Blog          @relation(fields: [blogId] , references: [id])
}

model Comment{
  id        String        @id @default(uuid())
  comment   String
  userId    String
  user      User          @relation(fields:[userId] , references: [id])
  blogId    String
  blog      Blog          @relation(fields: [blogId] , references: [id])
  likes     Like[] 

  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())  @updatedAt
}

model Like{
  id          String          @id @default(uuid())
  userId      String    
  user        User            @relation(fields: [userId],references: [id])
  commentId   String
  comment     Comment         @relation(fields: [commentId] , references: [id])
  blogId      String          
  blog        Blog            @relation(fields: [blogId] , references: [id])

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now())  @updatedAt
}

model Favoriate {
  id        String        @id @default(uuid())
  userId    String
  user      User          @relation(fields: [userId] , references: [id])
  blogId    String
  blog      Blog          @relation(fields: [blogId],references: [id])

  createdAt DateTime      @default(now())
}

model CustomList {
  id        String            @id @default(uuid())
  name      String
  userId    String
  user      User              @relation(fields: [userId] , references: [id])
  blogs     CustomListBlogs[]

  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())  @updatedAt
}

model CustomListBlogs{
  id            String      @id @default(uuid())
  blogId        String
  blog          Blog        @relation(fields: [blogId] , references: [id])
  customListId  String
  customList    CustomList  @relation(fields: [customListId] , references: [id])

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())  @updatedAt
}